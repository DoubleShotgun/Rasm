
global pseudoInstr:hashmap(string,@record{
	argc:uint8,
	assemble:function(args:sequence(uint64)):sequence(uint8)
})

local infiniteSize = 0xff

local function concat(s1:sequence(uint8),s2:sequence(uint8)):sequence(uint8)
	for i=1,#s2 do
		s1[#s1+1] = s2[i]
	end
	return s1
end

pseudoInstr["li"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		if args[2]<0x800 then
			return getInstr("addi",{args[1],0,args[2]})
		else
			if args[2]&0xfff==0 then
				return getInstr("lui",{args[1],args[2]>>12})
			end
			local upper = args[2]>>12
			if args[2]&0xfff >= 0x800 then
				upper = upper+1
			end
			return concat(
				getInstr("lui",{args[1],upper}),
				execArgs.bit32 == true and
					getInstr("addi", {args[1],args[1],args[2]}) or
					getInstr("addiw",{args[1],args[1],args[2]})
			)
		end
	end
}

pseudoInstr["la"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		local val
		if (@int64)(args[2])<0 then
			val = ~(args[2])>>12
		else
			val = args[2]>>12
		end
		return concat(
			getInstr("auipc",{args[1],val}),
			getInstr("addi",{args[1],args[1],args[2]})
		)
	end
}

pseudoInstr["mv"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("addi",{args[1],args[2],0})
	end
}

pseudoInstr["not"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("xori",{args[1],args[2],0xfff})
	end
}

pseudoInstr["neg"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("sub",{args[1],0,args[2]})
	end
}

pseudoInstr["bgt"] = {
	3,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("blt",{args[2],args[1],args[3]})
	end
}

pseudoInstr["ble"] = {
	3,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bge",{args[2],args[1],args[3]})
	end
}

pseudoInstr["bgtu"] = {
	3,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bltu",{args[2],args[1],args[3]})
	end
}

pseudoInstr["bleu"] = {
	3,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bgeu",{args[2],args[1],args[3]})
	end
}

pseudoInstr["beqz"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("beq",{args[1],0,args[2]})
	end
}

pseudoInstr["bnez"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bne",{args[1],0,args[2]})
	end
}

pseudoInstr["bgez"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bge",{args[1],0,args[2]})
	end
}

pseudoInstr["bgez"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("bge",{0,args[1],args[2]})
	end
}

pseudoInstr["bgtz"] = {
	2,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("blt",{0,args[1],args[2]})
	end
}

pseudoInstr["j"] = {
	1,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("jal",{0,args[1]})
	end
}

pseudoInstr["call"] = {
	1,
	function(args:sequence(uint64)):sequence(uint8)
		return getInstr("jal",{1,args[1]})
	end
}

pseudoInstr["ret"] = {
	0,
	function(args:sequence(uint64)):sequence(uint8)
		return {0x67,0x80,0,0}
	end
}

pseudoInstr["nop"] = {
	0,
	function(args:sequence(uint64)):sequence(uint8)
		return {0x13,0,0,0}
	end
}

pseudoInstr["db"] = {
	infiniteSize,
	function(args:sequence(uint64)):sequence(uint8)
		local ret:sequence(uint8)
		for _,v in ipairs(args) do
			ret[#ret+1]=v&0xff
		end
		return ret
	end
}

pseudoInstr["dh"] = {
	infiniteSize,
	function(args:sequence(uint64)):sequence(uint8)
		local ret:sequence(uint8)
		for _,v in ipairs(args) do
			ret[#ret+1]=v&0xff
			ret[#ret+1]=(v>>8)&0xff
		end
		return ret
	end
}

pseudoInstr["dw"] = {
	infiniteSize,
	function(args:sequence(uint64)):sequence(uint8)
		local ret:sequence(uint8)
		for _,v in ipairs(args) do
			ret[#ret+1]=v&0xff
			ret[#ret+1]=(v>>8)&0xff
			ret[#ret+1]=(v>>16)&0xff
			ret[#ret+1]=(v>>24)&0xff
		end
		return ret
	end
}

pseudoInstr["dd"] = {
	infiniteSize,
	function(args:sequence(uint64)):sequence(uint8)
		local ret:sequence(uint8)
		for _,v in ipairs(args) do
			ret[#ret+1]=v&0xff
			ret[#ret+1]=(v>>8)&0xff
			ret[#ret+1]=(v>>16)&0xff
			ret[#ret+1]=(v>>24)&0xff
			ret[#ret+1]=(v>>32)&0xff
			ret[#ret+1]=(v>>40)&0xff
			ret[#ret+1]=(v>>48)&0xff
			ret[#ret+1]=(v>>56)&0xff
		end
		return ret
	end
}