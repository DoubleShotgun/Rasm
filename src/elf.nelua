--Ripped from linux/elf.h

local addressOffset:uint64 <const> = 0x10000
local paddingSize = 16

local elf64Ehdr = @record {
  e_ident:[16]uint8,
  eype:uint16,
  e_machine:uint16,
  e_version:uint32,
  e_entry:uint64,
  e_phoff:uint64,
  e_shoff:uint64,
  e_flags:uint32,
  e_ehsize:uint16,
  e_phentsize:uint16,
  e_phnum:uint16,
  e_shentsize:uint16,
  e_shnum:uint16,
  e_shstrndx:uint16,
}

local elf64Shdr = @record{
    sh_name:uint32,
    sh_type:uint32,
    sh_flags:uint64,
    sh_addr:uint64,
    sh_offset:uint64,
    sh_size:uint64,
    sh_link:uint32,
    sh_info:uint32,
    sh_addralign:uint64,
    sh_entsize:uint64,
}

local elf64Phdr = @record {
  p_type:uint32,
  p_flags:uint32,
  p_offset:uint64,
  p_vuint:uint64,
  p_puint:uint64,
  p_filesz:uint64,
  p_memsz:uint64,
  p_align:uint64,
}

local elf64Sym = @record {
  st_name:uint32,
  st_info:uint8,
  st_other:uint8,
  st_shndx:uint16,
  st_value:uint64,
  st_size:uint64,
}

local elf64Rel = @record {
	r_offset:uint64,
	r_info:uint64,
}


local shdrs:sequence(elf64Shdr)
local syms:sequence(elf64Sym)
local rels:sequence(elf64Rel)
local names:hashmap(string,uint32)
local nameLen=0

local function addString(name:string):uint32
	local ret=0
	name=name.."\0"
	if names:has(name) then
		return names[name]
	end
	if name~="" then
		ret=nameLen
		names[name]=nameLen
		nameLen=nameLen+#name
	end
	return ret
end

addString("\0")

local function addSym(name:string,info:uint8,value:uint64,shindex:uint16):uint32
	local nameN = addString(name)
	local ret=#syms
	syms[#syms+1]= (@elf64Sym)({
		nameN,
		info,
		0,
		shindex,
		value,
		0
	})
	return ret
end

addSym("",0,0,0)
--addSym(".text",3,0,1)

local function addShdr(name:string, sType:uint64, flag:uint32, size:uint64, offset:uint64)
	if sType==0 then
		shdrs[#shdrs+1] = (@elf64Shdr)({0})
		return
	end
	
	local align=1
	if name==".text" then
		align=4
	end
	
	local link=0
	local eSize=0
	local info=0
	
	local nameN = addString(name)
	local shdr:elf64Shdr = {
		nameN,
		sType, 
		flag, 
		addressOffset+offset,
		offset,
		size, 
		link,
		info,
		align,
		eSize,
	}
	
	shdrs[#shdrs+1] = shdr
end

global function writeToFile(filename:string,program:sequence(uint8),start:uint64)
	local strip=execArgs.strip

	
	addShdr(
		".text",
		1, --PROGBITS
		7, --WRITE | ALLOC | EXEC
		getProgramSize(),
		64+#elf64Shdr * (strip==true and 1 or 2)
	)

	if not strip then
		addShdr(".shstrtab",3, 0,0,64+(#elf64Shdr*2)+getProgramSize()+#elf64Phdr)
		shdrs[#shdrs].sh_addr=shdrs[#shdrs].sh_addr-addressOffset
		shdrs[#shdrs].sh_size=nameLen
	end
	
	local ph:elf64Phdr = {
		1, --LOAD
		7,
		0,
		addressOffset,
		addressOffset,
		getProgramSize()+paddingSize,
		getProgramSize()+paddingSize,
		0x1000
	}


	local header:elf64Ehdr = {
		{0x7f,0x45,0x4c,0x46,2,1,1,0},
		2,
		243, --RISC-V
		1,
		64+addressOffset+#shdrs*#elf64Shdr+start,
		64+getProgramSize()+#shdrs*#elf64Shdr,
		64,
		4,
		64,
		56,
		1,
		64,
		#shdrs,
		#shdrs-1,
	}

	

	local file = C.fopen(filename,"w")
	if file==0 then
		os.exit(1)
	end

	C.fwrite(&header,#elf64Ehdr,1,file)	
	for i=1,<=#shdrs do
		C.fwrite(&shdrs[i], #elf64Shdr,1,file)
	end

	C.fwrite(&program[1],1,#program,file)

	C.fwrite(&ph,#elf64Phdr,1,file)

	if not strip then
		for k,v in pairs(names) do
			C.fwrite(&k[1], #k,1,file)
		end
	end

	C.fclose(file)
end