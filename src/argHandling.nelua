global fileout:string

global execPath = arg[0]
global execArgs = (@record{
	dump:boolean,
	strip:boolean,
	bit32:boolean
})({ -- Default Options
	strip=true
})

local skipArg = false

local optType = @enum {
	bool = 0,
	fileout
}

local opt:hashmap(uint8,@record{
	type:optType,
	execArgsP:*void
})

opt[string.byte("d")] = {
	optType.bool,
	&execArgs.dump
}
opt[string.byte("s")] = {
	optType.bool,
	&execArgs.strip
}
opt[string.byte("3")] = {
	optType.bool,
	&execArgs.bit32
}
opt[string.byte("o")] = {
	optType.fileout,
	(@*void)(0)
}

local function handleOpt(char:uint8,i:uint64)
	switch opt[char].type do
	case optType.bool then
		$(@*boolean)(opt[char].execArgsP) = not $(@*boolean)(opt[char].execArgsP)
	case optType.fileout then
		if i==#arg then
			print("Error: No argument for option")
			print(usageStr)
			os.exit(2)
		else
			fileout = arg[i+1]
			skipArg = true
		end
	end
end

for i,a in ipairs(arg) do
	
	if skipArg then
		if i==#arg then
			print("Error: No filein")
			print(usageStr)
			os.exit(2)
		end
		skipArg=false
		continue
	end
	if i==#arg then
		filein=a
		break
	end

	for _,v in ipairs(arg[i]) do
		if string.char(v)=="-" then
			continue
		end
		if not opt:has(v) then
			print("Error: \""..string.char(v)..'"'.." No such option")
			print(usageStr)
			os.exit(2)
		end
		handleOpt(v,i)
	end
end

fileout = fileout=="" and "./a.out" or fileout