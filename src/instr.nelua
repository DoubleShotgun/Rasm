global instrType = @enum{
	n = 0, -- Only for ecall and ebreak
	i,
	r,
	s, 
	sb,
	u,
	uj
}

global instruction:hashmap(string,@record{
	type:instrType,
	opcode:uint8,
	func3:uint8,
	func7:uint8,
})

global function getArg(str:string):uint64
	if str:match("^-?%d*$") then
		return (@uint64)(tointeger(str))
	elseif str:match("^0x?[%da-fA-F]*$") then
		return (@uint64)(tointeger(str))
	elseif labels:has(str) then
		if labels[str].length==-1 then
			return labels[str].value
		else
			return (@uint64)(labels[str].value-getProgramSize())
		end
	elseif str:match("^%%") then
		local label = str:sub(2,#str)
		if labels:has(label) then
			return (@uint64)(labels[label].length)
		end
	end
	return 0
end


global function getInstr(mnemonic:string,args:sequence(uint64)):[4]uint8
	if not instruction:has(mnemonic) then
		print("Error: no such mnemonic")
		os.exit(1)
	end

	--TODO: Warn user about imm max value
	
	local curInstr = instruction[mnemonic]
	local instr:uint32 = curInstr.opcode
	switch curInstr.type do
	case instrType.n then
		instr = instr | ((@uint64)(curInstr.func7)<<20)
	case instrType.r then
		fallthrough
	case instrType.i then
		instr = instr | (@uint32)(args[1]<<7)
		instr = instr | (@uint32)(args[2]<<15)
		instr = instr | (@uint32)(args[3]<<20)
		instr = instr | ((@uint32)(curInstr.func3)<<12)
		instr = instr | ((@uint32)(curInstr.func7)<<25)
	case instrType.s then
		instr = instr | (@uint32)(args[1]<<15)
		instr = instr | (@uint32)(args[2]<<20)
		instr = instr | (@uint32)((args[3]&0x1f)<<7)
	  instr = instr | (@uint32)((args[3]>>5)<<25)
		instr = instr | ((@uint32)(curInstr.func3)<<12)
	case instrType.sb then
		instr = instr | (@uint32)(args[1]<<15)
		instr = instr | (@uint32)(args[2]<<20)
		instr = instr | (@uint32)((args[3]&0x001e)<<7) 
	  instr = instr | (@uint32)((args[3]&0x07e0)<<20)
		instr = instr | (@uint32)((args[3]&0x0800)>>4)
		instr = instr | (@uint32)((args[3]&0x1000)<<19)
		instr = instr | ((@uint32)(curInstr.func3)<<12)
	case instrType.u then
		instr = instr | (@uint32)(args[1]<<7)
		instr = instr | (@uint32)(args[2]<<12)
	case instrType.uj then
		instr = instr | (@uint32)(args[1]<<7)
		instr = instr | (@uint32)((args[2]&0b11111111110)<<20) -- 10:1
		instr = instr | (@uint32)(((args[2]>>11)&1)<<20) -- 11
		instr = instr | (@uint32)(((args[2]>>12)&0b011111111)<<12) -- 19:12
		instr = instr | (@uint32)(((args[2]>>20))<<31) -- 20
	end
	return {
		(@uint8)(instr),
		(@uint8)(instr>>8),
		(@uint8)(instr>>16),
		(@uint8)(instr>>24)
	}
end